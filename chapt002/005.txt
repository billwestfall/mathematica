pi@raspberrypi:~ $ wolfram
Wolfram Language (Raspberry Pi Pilot Release)
Copyright 1988-2016 Wolfram Research
Information & help: wolfram.com/raspi

In[1]:= h[x_] := f[x] + g[x]                                                    

In[2]:= Map[h, {a, b, c}]                                                       

Out[2]= {f[a] + g[a], f[b] + g[b], f[c] + g[c]}

In[3]:= Map[ f[#] + g[#] &, {a, b, c}]                                          

Out[3]= {f[a] + g[a], f[b] + g[b], f[c] + g[c]}

In[4]:= Function[x, x^2]                                                        

                     2
Out[4]= Function[x, x ]

In[5]:= %[n]                                                                    

         2
Out[5]= n

In[6]:= Map[ Function[x, x^2], a + b + c]                                       

         2    2    2
Out[6]= a  + b  + c

In[7]:= Nest[ Function[q, 1/{1+q)], x, 3]                                       

Syntax::sntxf: "Nest[ Function[q, 1/{1+q" cannot be followed by ")], x, 3]".


In[8]:= Nest[ Function[q, 1/(1+q)], x, 3]                                       

              1
Out[8]= -------------
                1
        1 + ---------
                  1
            1 + -----
                1 + x

In[9]:= Map[ #^2 &, a + b + c]                                                  

         2    2    2
Out[9]= a  + b  + c

In[10]:= Map[Take[#, 2]&, {{2, 1, 7}, {4, 1, 5}, {3, 1, 2}}]                    

Out[10]= {{2, 1}, {4, 1}, {3, 1}}

In[11]:= tonumber[digits_] := Fold[(10 #1 + #2)&, 0, digits]                    

In[12]:= f[##, ##]& [x, y]                                                      

Out[12]= f[x, y, x, y]

In[13]:= Apply[f[##2, #1]&, {{a, b, c}, {ap, bp}}, {1}]                         

Out[13]= {f[b, c, a], f[bp, ap]}

In[14]:= Array[p, 5]                                                            

Out[14]= {p[1], p[2], p[3], p[4], p[5]}

In[15]:= Table[p[i], {i, 5}]                                                    

Out[15]= {p[1], p[2], p[3], p[4], p[5]}

In[16]:= Array[ # + #^2 &, 5]                                                   

Out[16]= {2, 6, 12, 20, 30}

In[17]:= Array[m, {2, 3}]                                                       

Out[17]= {{m[1, 1], m[1, 2], m[1, 3]}, {m[2, 1], m[2, 2], m[2, 3]}}

In[18]:= Array[Plus[##]^2 &, {3, 3}]                                            

Out[18]= {{4, 9, 16}, {9, 16, 25}, {16, 25, 36}}

In[19]:= NestList[ D[#, x]&, x^n, 3 ]                                           

           n     -1 + n              -2 + n                       -3 + n
Out[19]= {x , n x      , (-1 + n) n x      , (-2 + n) (-1 + n) n x      }

In[20]:= Select[{2, 15, 1, a, 16, 17}, # > 4 &]                                 

Out[20]= {15, 16, 17}

In[21]:= t = Expand[(x + y + z)^2]                                              

          2            2                    2
Out[21]= x  + 2 x y + y  + 2 x z + 2 y z + z

In[22]:= Select[t, FreeQ[#, x]&]                                                

          2            2
Out[22]= y  + 2 y z + z

In[23]:= Select[{-1, 3, 10, 12, 14}, # > 3 &, 1]                                

Out[23]= {10}

In[24]:= f[3][x, y]                                                             

Out[24]= f[3][x, y]

In[25]:= (a + b)[x]                                                             

Out[25]= (a + b)[x]

In[26]:= Function[x, x^2] [a + b]                                               

                2
Out[26]= (a + b)

In[27]:= NDSolve[{y''[x] == y[x], y[0]==y'[0]==1}, y, {x, 0, 5}]                

Out[27]= {{y -> InterpolatingFunction[{{0., 5.}}, <>]}}

In[28]:= y /. First[%]                                                          

Out[28]= InterpolatingFunction[{{0., 5.}}, <>]

In[29]:= % [3.8]                                                                

Out[29]= 44.7012

In[30]:= f'[x] // FullForm                                                      

Out[30]//FullForm= Derivative[1][f][x]

In[31]:= % /. f' -> fp                                                          

Out[31]= fp[x]

In[32]:=                                                                        
